"use strict";(self.webpackChunknhttp_webdoc=self.webpackChunknhttp_webdoc||[]).push([[738],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=u(n),s=a,f=d["".concat(i,".").concat(s)]||d[s]||m[s]||l;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=s;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[d]="string"==typeof e?e:a,o[1]=p;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},1124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var r=n(7462),a=(n(7294),n(4137));const l={},o="Upload File",p={unversionedId:"usage/upload",id:"usage/upload",title:"Upload File",description:"NHttp built in multipart by default. so, no need any library to handle upload.",source:"@site/docs/usage/upload.md",sourceDirName:"usage",slug:"/usage/upload",permalink:"/docs/usage/upload",draft:!1,editUrl:"https://github.com/nhttp/webdocs/edit/master/docs/usage/upload.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Throw Error",permalink:"/docs/usage/throw-error"},next:{title:"app",permalink:"/docs/application/app"}},i={},u=[{value:"Multipart",id:"multipart",level:3}],c={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"upload-file"},"Upload File"),(0,a.kt)("p",null,"NHttp built in multipart by default. so, no need any library to handle upload."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Support Deno, Bun, Nodejs.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { multipart, nhttp } from "https://deno.land/x/nhttp@1.2.9/mod.ts";\nconst app = nhttp();\n\n// handle upload multipart/form-data\nconst upload = multipart.upload({ name: "image" });\n\napp.post("/upload", upload, (rev) => {\n  console.log(rev.file);\n  return "success upload file";\n});\napp.listen(3000);\n')),(0,a.kt)("h3",{id:"multipart"},"Multipart"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'...\n\n// upload\nmultipart.upload({ name: "image" });\n\n// single upload\nmultipart.upload({ name: "image", maxCount: 1 });\n\n// required field (will throw bad request error 400)\nmultipart.upload({ name: "image", required: true });\n\n// accept file\nmultipart.upload({ name: "image", accept: \'png|jpg\' });\n\n// maxSize file\nmultipart.upload({ name: "image", maxSize: \'2 mb\' });\n\n// callback\nmultipart.upload({\n  name: "image", \n  callback: (file) => {\n    // change filename\n    file.filename = Date.now() + file.name;\n  }\n});\n\n// destination\nmultipart.upload({\n  name: "image", \n  dest: "public/user_folder/"\n});\n\n// multiple field\nmultipart.upload(\n  [\n    { \n      name: "user_image", \n      dest: "public/user_folder/"\n      // other\n    },\n    { \n      name: "employee_image", \n      dest: "public/employee_folder/"\n      // other\n    }\n  ]\n);\n...\n')))}m.isMDXComponent=!0}}]);