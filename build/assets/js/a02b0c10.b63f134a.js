(self.webpackChunknhttp_website_docu=self.webpackChunknhttp_website_docu||[]).push([[54],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8852:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),l=["components"],i={sidebar_position:8},u="Upload File",p={unversionedId:"request-event/upload-file",id:"request-event/upload-file",isDocsHomePage:!1,title:"Upload File",description:"NHttp built in multipart by default. so NO need any library to handle upload.",source:"@site/docs/request-event/upload-file.md",sourceDirName:"request-event",slug:"/request-event/upload-file",permalink:"/docs/request-event/upload-file",editUrl:"https://github.com/nhttp/webdocs/edit/master/docs/request-event/upload-file.md",version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Request getCookies",permalink:"/docs/request-event/get-cookies"},next:{title:"Error Handling",permalink:"/docs/error/error-handling"}},c=[{value:"Multipart",id:"multipart",children:[]}],s={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"upload-file"},"Upload File"),(0,o.kt)("p",null,"NHttp built in multipart by default. so NO need any library to handle upload."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Support only Deno runtime.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { NHttp, multipart } from "https://deno.land/x/nhttp@1.1.2/mod.ts";\nconst app = new NHttp();\n\n// handle upload multipart/form-data\napp.post("/upload", multipart.upload({ name: "image" }), ({ response, file }) => {\n    console.log(file.image);\n    // => file or [file1, file2]\n    return response.send(\'success upload file\');\n});\napp.listen(3000);\n')),(0,o.kt)("h3",{id:"multipart"},"Multipart"),(0,o.kt)("p",null,"Cause based on native HTTP, handling multipart is very simple."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'...\n\n// upload\nmultipart.upload({ name: "image" });\n\n// single upload\nmultipart.upload({ name: "image", maxCount: 1 });\n\n// required field (will throw bad request error 400)\nmultipart.upload({ name: "image", required: true });\n\n// accept file\nmultipart.upload({ name: "image", accept: \'png|jpg\' });\n\n// maxSize file\nmultipart.upload({ name: "image", maxSize: \'2 mb\' });\n\n// callback\nmultipart.upload({\n    name: "image", \n    callback: (file) => {\n        // change filename\n        file.filename = Date.now() + file.name;\n    }\n});\n\n// destination\nmultipart.upload({\n    name: "image", \n    dest: "public/user_folder/"\n});\n\n// multiple field\nmultipart.upload(\n    [\n        { \n            name: "user_image", \n            dest: "public/user_folder/"\n            // other\n        },\n        { \n            name: "employee_image", \n            dest: "public/employee_folder/"\n            // other\n        }\n    ]\n);\n...\n')))}d.isMDXComponent=!0}}]);