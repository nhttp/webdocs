(self.webpackChunknhttp_website_docu=self.webpackChunknhttp_website_docu||[]).push([[1669],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},802:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],u={sidebar_position:8},l="Other Runtime",p={unversionedId:"usage/runtime",id:"usage/runtime",isDocsHomePage:!1,title:"Other Runtime",description:"Support Bun, Node, CF-Workers, etc.",source:"@site/docs/usage/runtime.md",sourceDirName:"usage",slug:"/usage/runtime",permalink:"/docs/usage/runtime",editUrl:"https://github.com/nhttp/webdocs/edit/master/docs/usage/runtime.md",version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Route Paths",permalink:"/docs/usage/route-paths"},next:{title:"Body Parser",permalink:"/docs/usage/body-parser"}},c=[{value:"Install",id:"install",children:[]},{value:"Usage (Bun / Node)",id:"usage-bun--node",children:[]},{value:"tsconfig",id:"tsconfig",children:[]}],s={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"other-runtime"},"Other Runtime"),(0,a.kt)("p",null,"Support Bun, Node, CF-Workers, etc."),(0,a.kt)("h3",{id:"install"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i nhttp-land\n\n// or\n\nyarn add nhttp-land\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { nhttp } from "nhttp-land";\n')),(0,a.kt)("h3",{id:"usage-bun--node"},"Usage (Bun / Node)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { multipart, nhttp } from "nhttp-land";\n\nconst app = nhttp();\n\napp.get("/", () => "hello, world");\n\n// example upload\nconst upload = multipart.upload({\n  name: "image",\n  writeFile: Bun.write, /* or fs.writeFileSync */\n});\napp.post("/upload", upload, (rev) => {\n  console.log(rev.file);\n  console.log(rev.body);\n  return "success upload";\n});\n\napp.listen(8000, () => {\n  console.log("> Running on port 8000");\n});\n\n// if cfw or other runtime, just invoke app.handle\n// export default { fetch: app.handle };\n')),(0,a.kt)("h3",{id:"tsconfig"},"tsconfig"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "types": ["bun-types"],\n    "experimentalDecorators": true,\n    "moduleResolution": "nodenext",\n    "target": "ES5",\n    "lib": [\n      "DOM",\n      "DOM.Iterable",\n      "ESNext"\n    ]\n  }\n}\n')))}d.isMDXComponent=!0}}]);