(self.webpackChunknhttp_website_docu=self.webpackChunknhttp_website_docu||[]).push([[1476],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=r.createContext({}),d=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=d(t.components);return r.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),s=d(n),m=o,f=s["".concat(p,".").concat(m)]||s[m]||u[m]||a;return n?r.createElement(f,i(i({ref:e},c),{},{components:n})):r.createElement(f,i({ref:e},c))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=s;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},9456:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return c},default:function(){return s}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],l={},p="Zod Validator",d={unversionedId:"3rd-party-lib/zod-validator",id:"3rd-party-lib/zod-validator",isDocsHomePage:!1,title:"Zod Validator",description:"Validate body with zod.",source:"@site/docs/3rd-party-lib/zod-validator.md",sourceDirName:"3rd-party-lib",slug:"/3rd-party-lib/zod-validator",permalink:"/docs/3rd-party-lib/zod-validator",editUrl:"https://github.com/nhttp/webdocs/edit/master/docs/3rd-party-lib/zod-validator.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"tRPC",permalink:"/docs/3rd-party-lib/tRPC"}},c=[{value:"Import",id:"import",children:[]},{value:"Usage",id:"usage",children:[]}],u={toc:c};function s(t){var e=t.components,n=(0,o.Z)(t,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"zod-validator"},"Zod Validator"),(0,a.kt)("p",null,"Validate body with zod."),(0,a.kt)("h3",{id:"import"},"Import"),(0,a.kt)("h4",{id:"deno"},"Deno"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {...} from "https://deno.land/x/nhttp@1.2.7/lib/zod-validator.ts";\n')),(0,a.kt)("h4",{id:"deno-npm"},"Deno npm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {...} from "npm:nhttp-land@1.2.7/zod-validator";\n')),(0,a.kt)("h4",{id:"node--bun"},"Node / Bun"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i zod\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {...} from "nhttp-land/zod-validator";\n// or\n// const {...} = require("nhttp-land/zod-validator");\n')),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import nhttp from "https://deno.land/x/nhttp@1.2.7/mod.ts";\nimport validate, { z } from "https://deno.land/x/nhttp@1.2.7/lib/zod-validator.ts";\n\nconst User = z.object({\n  username: z.string(),\n  password: z.string(),\n  user_info: z.object({\n    name: z.string(),\n    address: z.string(),\n  }),\n});\n\nconst app = nhttp();\n\n// validate support all content-type (json, multipart, raw, urlencoded)\napp.post("/", validate(User), (rev) => {\n  return rev.body.user_info;\n});\n\napp.listen(8000, (_err, info) => {\n  console.log(`Running on port ${info.port}`);\n});\n')))}s.isMDXComponent=!0}}]);